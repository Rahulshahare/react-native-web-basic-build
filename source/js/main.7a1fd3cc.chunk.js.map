{"version":3,"sources":["user-item.js","user-actions.js","user-list.js","home.js","header.js","App.js","serviceWorker.js","index.js"],"names":["styles","StyleSheet","create","row","flexDirection","justifyContent","alignItems","padding","marginBottom","backgroundColor","borderBottomWidth","hairlineWidth","borderBottomColor","rowIcon","width","height","marginRight","borderRadius","boxShadow","rowData","flex","rowDataText","fontSize","textTransform","color","rowDataSubText","opacity","marginTop","UserItem","_ref","user","item","react_default","a","createElement","View","style","Image","source","picture","medium","Text","concat","name","title","first","last","email","actionsContainer","actionButton","marginLeft","actionButtonDestructive","actionButtonText","textAlign","UserActions","props","console","log","TouchableHighlight","onPress","Alert","alert","UserList","users","SwipeableFlatList","data","bounceFirstRowOnMount","maxSwipeDistance","renderItem","renderQuickActions","Home","state","loading","this","getUsers","fetch","res","json","results","setState","Object","toConsumableArray","ScrollView","noSpacer","noScroll","container","ActivityIndicator","centering","size","user_list","React","Component","headerContainer","header","paddingVertical","minHeight","headerCenter","order","headerLeft","headerRight","fontWeight","Header","onBack","SafeAreaView","accessibilityRole","aria-level","App","appContainer","home","AppRegistry","registerComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a1fd3cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { View, Image, Text, StyleSheet } from \"react-native\";\r\n\r\nconst UserItem = ({ item: user }) => {\r\n  return (\r\n    <View style={styles.row}>\r\n      <Image style={styles.rowIcon} source={user.picture.medium} />\r\n      <View style={styles.rowData}>\r\n        <Text style={styles.rowDataText}>{`${user.name.title} ${user.name.first} ${user.name.last}`}</Text>\r\n        <Text style={styles.rowDataSubText}>{user.email}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  row: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    marginBottom: 5,\r\n    backgroundColor: \"white\",\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    borderBottomColor: \"rgba(0,0,0,0.1)\"\r\n  },\r\n  rowIcon: {\r\n    width: 64,\r\n    height: 64,\r\n    marginRight: 20,\r\n    borderRadius: \"50%\",\r\n    boxShadow: \"0 1px 2px 0 rgba(0,0,0,0.1)\"\r\n  },\r\n  rowData: {\r\n    flex: 1\r\n  },\r\n  rowDataText: {\r\n    fontSize: 15,\r\n    textTransform: \"capitalize\",\r\n    color: \"#4b4b4b\"\r\n  },\r\n  rowDataSubText: {\r\n    fontSize: 13,\r\n    opacity: 0.8,\r\n    color: \"#a8a689\",\r\n    marginTop: 4\r\n  }\r\n});\r\n\r\nexport default UserItem;\r\n","import React from \"react\";\r\nimport {\r\n  View,\r\n  TouchableHighlight,\r\n  Text,\r\n  Alert,\r\n  StyleSheet\r\n} from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n  actionsContainer: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    padding: 10\r\n  },\r\n  actionButton: {\r\n    padding: 10,\r\n    color: \"white\",\r\n    borderRadius: 6,\r\n    width: 80,\r\n    backgroundColor: \"#808080\",\r\n    marginRight: 5,\r\n    marginLeft: 5\r\n  },\r\n  actionButtonDestructive: {\r\n    backgroundColor: \"#ff4b21\"\r\n  },\r\n  actionButtonText: {\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nconst UserActions = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <View style={styles.actionsContainer}>\r\n      <TouchableHighlight\r\n        style={styles.actionButton}\r\n        onPress={() => {\r\n          Alert.alert(\"Tips\", \"You could do something with this edit action!\");\r\n        }}\r\n      >\r\n        <Text style={styles.actionButtonText}>Edit</Text>\r\n      </TouchableHighlight>\r\n      <TouchableHighlight\r\n        style={[styles.actionButton, styles.actionButtonDestructive]}\r\n        onPress={() => {\r\n          Alert.alert(\r\n            \"Tips\",\r\n            \"You could do something with this remove action!\"\r\n          );\r\n        }}\r\n      >\r\n        <Text style={styles.actionButtonText}>Remove</Text>\r\n      </TouchableHighlight>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default UserActions;\r\n","import React from \"react\";\r\nimport { SwipeableFlatList } from \"react-native\";\r\nimport UserItem from \"./user-item\";\r\nimport UserActions from \"./user-actions\";\r\n\r\nconst UserList = ({ users }) => {\r\n  return (\r\n    <SwipeableFlatList\r\n      data={users}\r\n      bounceFirstRowOnMount={true}\r\n      maxSwipeDistance={160}\r\n      renderItem={UserItem}\r\n      renderQuickActions={UserActions}\r\n    />\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React from \"react\";\r\nimport { ScrollView, StyleSheet, ActivityIndicator } from \"react-native\";\r\nimport UserList from \"./user-list\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    users: [],\r\n    loading: true\r\n  };\r\n  componentDidMount() {\r\n    this.getUsers();\r\n  }\r\n\r\n  async getUsers() {\r\n    const res = await fetch(\"https://randomuser.me/api/?results=20\");\r\n    const { results } = await res.json();\r\n    this.setState({ users: [...results], loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ScrollView noSpacer={true} noScroll={true} style={styles.container}>\r\n        {this.state.loading ? (\r\n          <ActivityIndicator\r\n            style={[styles.centering]}\r\n            color=\"#ff8179\"\r\n            size=\"large\"\r\n          />\r\n        ) : (\r\n          <UserList users={this.state.users} />\r\n        )}\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"whitesmoke\"\r\n  },\r\n  centering: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 8,\r\n    height: \"100vh\"\r\n  }\r\n});\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {SafeAreaView, View, Text, StyleSheet} from 'react-native';\r\n\r\nconst Header = ({ onBack, title }) => (\r\n  <SafeAreaView style={styles.headerContainer}>\r\n    <View style={styles.header}>\r\n      <View style={styles.headerCenter}>\r\n        <Text accessibilityRole=\"heading\" aria-level=\"3\" style={styles.title}>{title}</Text>\r\n      </View>\r\n    </View>\r\n  </SafeAreaView>\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n  headerContainer: {\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    borderBottomColor: '#ff4e3f',\r\n    backgroundColor: '#ff8179',\r\n  },\r\n  header: {\r\n    padding: 10,\r\n    paddingVertical: 5,\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    minHeight: 50\r\n  },\r\n  headerCenter: {\r\n    flex: 1,\r\n    order: 2\r\n  },\r\n  headerLeft: {\r\n    order: 1,\r\n    width: 80\r\n  },\r\n  headerRight: {\r\n    order: 3,\r\n    width: 80\r\n  },\r\n  title: {\r\n    fontSize: 19,\r\n    fontWeight: '600',\r\n    textAlign: 'center',\r\n    color: 'white'\r\n  },\r\n});\r\n\r\nexport default Header;","import React from 'react';\r\nimport {\r\n  AppRegistry,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nimport Home from './home';\r\nimport Header from './header';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <View style={styles.appContainer}>\r\n        <Header title=\"Oceangreen's Random People\" />\r\n        <Home />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  appContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nAppRegistry.registerComponent('App', () => App);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}